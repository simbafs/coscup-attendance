package data

import (
	"encoding/json"
	"fmt"
	"net/http"
	"sort"
	"time"
)

type Attendance map[int]Day

type Day map[string]Room

type Room map[string]int

type Diff []struct {
	Day        int    `json:"day"`
	Room       string `json:"room"`
	ID         string `json:"id"`
	Attendance int    `json:"attendance"`
}

type RawData struct {
	Sessions []struct {
		ID       string    `json:"id"`
		Type     string    `json:"type"`
		Room     string    `json:"room"`
		Start    time.Time `json:"start"`
		End      time.Time `json:"end"`
		Language string    `json:"language"`
		Zh       struct {
			Title       string `json:"title"`
			Description string `json:"description"`
		} `json:"zh"`
		En struct {
			Title       string `json:"title"`
			Description string `json:"description"`
		} `json:"en"`
		Speakers []string    `json:"speakers"`
		Tags     []string    `json:"tags"`
		CoWrite  string      `json:"co_write"`
		Qa       interface{} `json:"qa"`
		Slide    interface{} `json:"slide"`
		Record   interface{} `json:"record"`
		URI      string      `json:"uri"`
	} `json:"sessions"`
	Speakers []struct {
		ID     string `json:"id"`
		Avatar string `json:"avatar"`
		Zh     struct {
			Name string `json:"name"`
			Bio  string `json:"bio"`
		} `json:"zh"`
		En struct {
			Name string `json:"name"`
			Bio  string `json:"bio"`
		} `json:"en"`
	} `json:"speakers"`
	SessionTypes []struct {
		ID string `json:"id"`
		Zh struct {
			Name string `json:"name"`
		} `json:"zh"`
		En struct {
			Name string `json:"name"`
		} `json:"en"`
	} `json:"session_types"`
	Rooms []struct {
		ID string `json:"id"`
		Zh struct {
			Name string `json:"name"`
		} `json:"zh"`
		En struct {
			Name string `json:"name"`
		} `json:"en"`
	} `json:"rooms"`
	Tags []struct {
		ID string `json:"id"`
		Zh struct {
			Name string `json:"name"`
		} `json:"zh"`
		En struct {
			Name string `json:"name"`
		} `json:"en"`
	} `json:"tags"`
}

func getRawData(url string) (data RawData, err error) {
	res, err := http.Get(url)
	if err != nil {
		return
	}
	defer res.Body.Close()

	err = json.NewDecoder(res.Body).Decode(&data)
	return
}

func GetDefaultAttendance() (*Attendance, error) {
	rawData, err := getRawData("https://coscup.org/2023/json/session.json")
	if err != nil {
		return nil, err
	}

	attendance := make(Attendance)
	rooms := GetRooms(rawData)

	attendance[29] = make(Day)
	attendance[30] = make(Day)

	for _, room := range rooms {
		attendance[29][room] = make(Room)
		attendance[30][room] = make(Room)
	}

	fmt.Printf("rooms: %#v\n", rooms)
	for _, session := range rawData.Sessions {
		fmt.Printf("day: %d, room: %s, id: %s\n", session.Start.Day(), session.Room, session.ID)
		attendance[session.Start.Day()][session.Room][session.ID] = 0
	}

	return &attendance, nil
}

func GetRooms(rawData RawData) []string {
	tmp := make(map[string]bool)
	rooms := make([]string, 0)
	for _, session := range rawData.Sessions {
		tmp[session.Room] = true
	}

	for room := range tmp {
		rooms = append(rooms, room)
	}

	sort.Sort(sort.StringSlice(rooms))

	return rooms
}
